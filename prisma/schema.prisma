// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  	provider = "prisma-client-js"
}

datasource db {
  	provider = "postgresql"
  	url      = env("DATABASE_URL")
}

model Session {
	id String @id
	sid String @unique
	data String @db.Text
	expiresAt DateTime
}

model User {
  	id Int @id @default(autoincrement()) @unique
	firstName String @db.VarChar(20)
	lastName String @db.VarChar(20)
	thumbnailPath String? @db.Text
	email String @db.VarChar(50) @unique
	password String @db.VarChar(100)
	description String? @db.Text
	isActive Boolean @default(true)
	// Thumbnail UserThumbnail?
	projects Project[] @relation("members")
	leaderOfProjects Project[] @relation("leaderOfProject")
	adminOfProjects Project[] @relation("admins")
	posts Post[]
	postComments PostComment[]
	taskComments TaskComment[]
	createdTasks Task[] @relation("createdTask")
	assignedTasks Task[] @relation("assignedTask")
}

model Project {
	id Int @id @default(autoincrement()) @unique
	name String @db.VarChar(100)
	description String @db.Text
	thumbnailPath String? @db.Text
	isActive Boolean @default(true)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	// Thumbnail ProjectThumbnail?
	leader User @relation(fields: [leaderId], references: [id], name: "leaderOfProject")
	leaderId Int
	posts Post[]
	members User[] @relation(name: "members")
	admins User[] @relation(name: "admins")
	tasks Task[]
	taskCategories TaskCategory[]
}

model Post {
	id Int @id @default(autoincrement()) @unique
	attachments PostAttachment[]
	title String @db.VarChar(100)
	content String @db.Text
	createdAt DateTime @default(now())
	author User @relation(fields: [authorId], references: [id])
	authorId Int
	project Project @relation(fields: [projectId], references: [id])
	projectId Int
	comments PostComment[]
}

model PostComment {
	id Int @id @default(autoincrement()) @unique
	content String @db.Text
	createdAt DateTime @default(now())
	author User @relation(fields: [authorId], references: [id])
	authorId Int
	post Post @relation(fields: [postId], references: [id])
	postId Int
}

model PostAttachment {
	id Int @id @default(autoincrement()) @unique
	post Post @relation(fields: [postId], references: [id])
	postId Int
	isImage Boolean @default(false)
	path String @db.Text
}

model Task {
	id Int @id @default(autoincrement()) @unique
	title String @db.VarChar(100)
	description String @db.Text
	priority String @db.VarChar(15)
	severity String @db.VarChar(15)
	status String @db.VarChar(15)
	createdAt DateTime @default(now())
	dueAt DateTime?
	completedAt DateTime?
	assignedAt DateTime?
	attachments TaskAttachment[]
	project Project @relation(fields: [projectId], references: [id])
	projectId Int
	createdBy User @relation(fields: [createdById], references: [id], name: "createdTask")
	createdById Int
	assignedTo User @relation(fields: [assignedToId], references: [id], name: "assignedTask")
	assignedToId Int
	category TaskCategory @relation(fields: [categoryId], references: [id])
	categoryId Int
	comments TaskComment[]
}

model TaskCategory {
	id Int @id @default(autoincrement()) @unique
	name String @db.VarChar(15)
	project Project @relation(fields: [projectId], references: [id])
	projectId Int
	tasks Task[]
}

model TaskComment {
	id Int @id @default(autoincrement()) @unique
	content String @db.Text
	createdAt DateTime @default(now())
	author User @relation(fields: [authorId], references: [id])
	authorId Int
	task Task @relation(fields: [taskId], references: [id])
	taskId Int
}

model TaskAttachment {
	id Int @id @default(autoincrement()) @unique
	task Task @relation(fields: [taskId], references: [id])
	taskId Int
	isImage Boolean @default(false)
	path String @db.Text
}